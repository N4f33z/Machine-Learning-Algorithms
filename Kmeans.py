# -*- coding: utf-8 -*-
"""KMEANS-ASSIGNMENT3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mqPu1MzMvKCGnhrxxi3zr87WE4fvTNco
"""

import numpy as np
from collections import Counter
import matplotlib.pyplot as plt
from google.colab import files
import pandas as pd

test = files.upload()

data = pd.read_csv('test.txt', sep=" ", header=None)

def centroid_calculate(data,k):
  datapoints = np.random.choice(len(data), k, replace=False)
  centroids = data[datapoints, :]
  return centroids

def calculate_distance(data,centroids):
  dst = []
  for i in data:
    dst.append(np.sqrt(np.sum((i-centroids)**2,axis=1))) 
    #print(np.sqrt(np.sum((i-centroids)**2,axis=1)))
  #print(distances)
  #print(type(dst))
  distances = np.array(dst)
  return distances

def close_points(distances):
  points = np.array([np.argmin(i) for i in distances])
  return points

def kmeans(x,k, iterations):
    
  centroids = centroid_calculate(x,k)#Choosing random Centroids from the dataset   
  distances = calculate_distance(x,centroids) #calculating the distance between centroids and all the data points 

  points = close_points(distances) #Finding closest points
    
    
  for i in range(iterations): 
    centroids = []

    for j in range(k):
      temp = x[points==j].mean(axis=0)  #Recalculating Centroids by mean of Cluster the point belongs to
      centroids.append(temp)
      #print(type(x[points==j]))
         
    distances = calculate_distance(x,centroids)
    points = close_points(distances)
         
  return points,centroids

df = np.array(data)
iterations = 100
k = 15
label,centers = kmeans(df,k,iterations)

def optimal_k(df,iterations):
  distortions = []
  #iterations = 100
  K = range(2,15)
  for k in K:
    labels, centroids = kmeans(df,k,iterations)
      #dist = calculate_distance(df,centroids)
    distortions.append(sum(np.min(cdist(df, centroids, 'euclidean'), axis=1) / 350))

  plt.plot(K, distortions, 'bx-')
  plt.xlabel('k')
  plt.title('The best number of cluster')
  plt.show()

optimal_k(df,100)

df = np.array(data)
iterations = 100
knum = [2,3,4,5,6,7,8,9,10,11,12,13,14,15]
#Applying our function
#print(df)
from matplotlib.pyplot import figure

#figure(figsize=(10, 10), dpi=80)
for k in knum:
  label,centers = kmeans(df,k,iterations)
  #print(label) 

  u_labels = np.unique(label)
  for i in u_labels:
    plt.scatter(df[label == i , 0] , df[label == i , 1] , label = i)
  plt.legend()
  plt.show()

|